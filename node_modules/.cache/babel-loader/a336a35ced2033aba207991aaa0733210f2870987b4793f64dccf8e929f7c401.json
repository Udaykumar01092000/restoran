{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SANTHOSH\\\\React_Applications\\\\swiggy\\\\src\\\\components\\\\scrolltop.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './scrolltop.css'; // Import the CSS for the button\n\n// const ScrollToTopButton = () => {\n//     const [isVisible, setIsVisible] = useState(false);\n\n//     // Show button when page is scrolled down\n//     const toggleVisibility = () => {\n//         if (window.pageYOffset > 300) {\n//             setIsVisible(true);\n//         } else {\n//             setIsVisible(false);\n//         }\n//     };\n\n//     // Scroll to top when button is clicked\n//     const scrollToTop = () => {\n//         window.scrollTo({\n//             top: 0,\n//             behavior: 'smooth'\n//         });\n//     };\n\n//     useEffect(() => {\n//         window.addEventListener('scroll', toggleVisibility);\n//         return () => {\n//             window.removeEventListener('scroll', toggleVisibility);\n//         };\n//     }, []);\n\n//     return (\n//         <div className=\"scroll-to-top\">\n//             {isVisible && \n//                 <div onClick={scrollToTop}>\n//                     &#8679;\n//                 </div>\n//             }\n//         </div>\n//     );\n// }\n\n// export default ScrollToTopButton;\n\nimport React, { useState, useEffect } from 'react';\nimport './scrolltop.css'; // Import the CSS for the button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScrollToTopButton = () => {\n  _s();\n  const [isVisible, setIsVisible] = useState(false);\n\n  // Show button when page is scrolled down\n  const toggleVisibility = () => {\n    if (window.pageYOffset > 300) {\n      setIsVisible(true);\n    } else {\n      setIsVisible(false);\n    }\n  };\n\n  // Scroll to top with easing effect\n  const scrollToTop = () => {\n    const scrollStep = -window.scrollY / (100 / 15); // Adjust speed (100 and 15) for desired effect\n    let scrollInterval = null;\n    const startTime = performance.now(); // Get current timestamp\n\n    // Function to handle scrolling with easing effect\n    const scrollWithEasing = () => {\n      const elapsed = performance.now() - startTime; // Calculate elapsed time\n      if (elapsed < 3000) {\n        // Scroll slowly for first 3 seconds\n        window.scrollBy(0, scrollStep / 2); // Scroll at half speed initially\n      } else {\n        // After 3 seconds, scroll at normal speed\n        if (window.scrollY !== 0) {\n          window.scrollBy(0, scrollStep);\n        } else {\n          clearInterval(scrollInterval);\n        }\n      }\n      if (window.scrollY !== 0) {\n        scrollInterval = requestAnimationFrame(scrollWithEasing); // Continue scrolling\n      } else {\n        cancelAnimationFrame(scrollInterval); // Stop scrolling when at the top\n      }\n    };\n\n    // Start scrolling\n    scrollInterval = requestAnimationFrame(scrollWithEasing);\n  };\n  useEffect(() => {\n    window.addEventListener('scroll', toggleVisibility);\n    return () => {\n      window.removeEventListener('scroll', toggleVisibility);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scroll-to-top\",\n    children: isVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: scrollToTop,\n      children: \"\\u21E7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(ScrollToTopButton, \"J3yJOyGdBT4L7hs1p1XQYVGMdrY=\");\n_c = ScrollToTopButton;\nexport default ScrollToTopButton;\nvar _c;\n$RefreshReg$(_c, \"ScrollToTopButton\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ScrollToTopButton","_s","isVisible","setIsVisible","toggleVisibility","window","pageYOffset","scrollToTop","scrollStep","scrollY","scrollInterval","startTime","performance","now","scrollWithEasing","elapsed","scrollBy","clearInterval","requestAnimationFrame","cancelAnimationFrame","addEventListener","removeEventListener","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SANTHOSH/React_Applications/swiggy/src/components/scrolltop.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './scrolltop.css'; // Import the CSS for the button\r\n\r\n// const ScrollToTopButton = () => {\r\n//     const [isVisible, setIsVisible] = useState(false);\r\n\r\n//     // Show button when page is scrolled down\r\n//     const toggleVisibility = () => {\r\n//         if (window.pageYOffset > 300) {\r\n//             setIsVisible(true);\r\n//         } else {\r\n//             setIsVisible(false);\r\n//         }\r\n//     };\r\n\r\n//     // Scroll to top when button is clicked\r\n//     const scrollToTop = () => {\r\n//         window.scrollTo({\r\n//             top: 0,\r\n//             behavior: 'smooth'\r\n//         });\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         window.addEventListener('scroll', toggleVisibility);\r\n//         return () => {\r\n//             window.removeEventListener('scroll', toggleVisibility);\r\n//         };\r\n//     }, []);\r\n\r\n//     return (\r\n//         <div className=\"scroll-to-top\">\r\n//             {isVisible && \r\n//                 <div onClick={scrollToTop}>\r\n//                     &#8679;\r\n//                 </div>\r\n//             }\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default ScrollToTopButton;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './scrolltop.css'; // Import the CSS for the button\r\n\r\nconst ScrollToTopButton = () => {\r\n    const [isVisible, setIsVisible] = useState(false);\r\n\r\n    // Show button when page is scrolled down\r\n    const toggleVisibility = () => {\r\n        if (window.pageYOffset > 300) {\r\n            setIsVisible(true);\r\n        } else {\r\n            setIsVisible(false);\r\n        }\r\n    };\r\n\r\n    // Scroll to top with easing effect\r\n    const scrollToTop = () => {\r\n        const scrollStep = -window.scrollY / (100 / 15); // Adjust speed (100 and 15) for desired effect\r\n        let scrollInterval = null;\r\n        const startTime = performance.now(); // Get current timestamp\r\n\r\n        // Function to handle scrolling with easing effect\r\n        const scrollWithEasing = () => {\r\n            const elapsed = performance.now() - startTime; // Calculate elapsed time\r\n            if (elapsed < 3000) { // Scroll slowly for first 3 seconds\r\n                window.scrollBy(0, scrollStep / 2); // Scroll at half speed initially\r\n            } else { // After 3 seconds, scroll at normal speed\r\n                if (window.scrollY !== 0) {\r\n                    window.scrollBy(0, scrollStep);\r\n                } else {\r\n                    clearInterval(scrollInterval);\r\n                }\r\n            }\r\n            if (window.scrollY !== 0) {\r\n                scrollInterval = requestAnimationFrame(scrollWithEasing); // Continue scrolling\r\n            } else {\r\n                cancelAnimationFrame(scrollInterval); // Stop scrolling when at the top\r\n            }\r\n        };\r\n\r\n        // Start scrolling\r\n        scrollInterval = requestAnimationFrame(scrollWithEasing);\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', toggleVisibility);\r\n        return () => {\r\n            window.removeEventListener('scroll', toggleVisibility);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"scroll-to-top\">\r\n            {isVisible && \r\n                <div onClick={scrollToTop}>\r\n                    &#8679;\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScrollToTopButton;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMQ,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,IAAIC,MAAM,CAACC,WAAW,GAAG,GAAG,EAAE;MAC1BH,YAAY,CAAC,IAAI,CAAC;IACtB,CAAC,MAAM;MACHA,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;;EAED;EACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMC,UAAU,GAAG,CAACH,MAAM,CAACI,OAAO,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;IACjD,IAAIC,cAAc,GAAG,IAAI;IACzB,MAAMC,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAErC;IACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;MAC3B,MAAMC,OAAO,GAAGH,WAAW,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS,CAAC,CAAC;MAC/C,IAAII,OAAO,GAAG,IAAI,EAAE;QAAE;QAClBV,MAAM,CAACW,QAAQ,CAAC,CAAC,EAAER,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;MACxC,CAAC,MAAM;QAAE;QACL,IAAIH,MAAM,CAACI,OAAO,KAAK,CAAC,EAAE;UACtBJ,MAAM,CAACW,QAAQ,CAAC,CAAC,EAAER,UAAU,CAAC;QAClC,CAAC,MAAM;UACHS,aAAa,CAACP,cAAc,CAAC;QACjC;MACJ;MACA,IAAIL,MAAM,CAACI,OAAO,KAAK,CAAC,EAAE;QACtBC,cAAc,GAAGQ,qBAAqB,CAACJ,gBAAgB,CAAC,CAAC,CAAC;MAC9D,CAAC,MAAM;QACHK,oBAAoB,CAACT,cAAc,CAAC,CAAC,CAAC;MAC1C;IACJ,CAAC;;IAED;IACAA,cAAc,GAAGQ,qBAAqB,CAACJ,gBAAgB,CAAC;EAC5D,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACZQ,MAAM,CAACe,gBAAgB,CAAC,QAAQ,EAAEhB,gBAAgB,CAAC;IACnD,OAAO,MAAM;MACTC,MAAM,CAACgB,mBAAmB,CAAC,QAAQ,EAAEjB,gBAAgB,CAAC;IAC1D,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIL,OAAA;IAAKuB,SAAS,EAAC,eAAe;IAAAC,QAAA,EACzBrB,SAAS,iBACNH,OAAA;MAAKyB,OAAO,EAAEjB,WAAY;MAAAgB,QAAA,EAAC;IAE3B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAET,CAAC;AAEd,CAAC;AAAA3B,EAAA,CAzDKD,iBAAiB;AAAA6B,EAAA,GAAjB7B,iBAAiB;AA2DvB,eAAeA,iBAAiB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}