{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n\n// let initialState = {\n//     cartItems: []\n// }\n\n// let slice = createSlice({\n//     name: \"cart\",\n//     initialState: initialState,\n//     reducers: {\n//         addToCart: (state, action) => {\n//             state.cartItems.push(action.payload);\n//         },\n\n//         removeFromCart: (state, action) => {\n//             const { index, quantity } = action.payload;\n//             const currentQuantity = state.cartItems[index]?.Quantity || 0;\n//             if (quantity >= currentQuantity) {\n//                 state.cartItems.splice(index, 1);\n//             } else {\n//                 state.cartItems[index].Quantity -= quantity;\n//             }\n//         },\n\n//         clearCart(state, action) {\n//             state.cartItems = []; // Clear cartItems array\n//         },\n\n//         updateQuantity: (state, action) => {\n//             const { index, quantity } = action.payload;\n//             state.cartItems[index].Quantity = quantity;\n//         }\n//     }\n// });\n\n// export const { addToCart, removeFromCart, updateQuantity , clearCart } = slice.actions;\n// export default slice.reducer;\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  cartItems: []\n};\nconst slice = createSlice({\n  name: \"cart\",\n  initialState: initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const {\n        Name,\n        Description,\n        Price,\n        Img,\n        Quantity,\n        RestaurantName\n      } = action.payload;\n      state.cartItems.push({\n        Name,\n        Description,\n        Price,\n        Img,\n        Quantity,\n        RestaurantName // Include RestaurantName in the cart item\n      });\n    },\n    removeFromCart: (state, action) => {\n      var _state$cartItems$inde;\n      const {\n        index,\n        quantity\n      } = action.payload;\n      const currentQuantity = ((_state$cartItems$inde = state.cartItems[index]) === null || _state$cartItems$inde === void 0 ? void 0 : _state$cartItems$inde.Quantity) || 0;\n      if (quantity >= currentQuantity) {\n        state.cartItems.splice(index, 1);\n      } else {\n        state.cartItems[index].Quantity -= quantity;\n      }\n    },\n    clearCart(state, action) {\n      state.cartItems = []; // Clear cartItems array\n    },\n    updateQuantity: (state, action) => {\n      const {\n        index,\n        quantity\n      } = action.payload;\n      state.cartItems[index].Quantity = quantity;\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart\n} = slice.actions;\nexport default slice.reducer;","map":{"version":3,"names":["createSlice","initialState","cartItems","slice","name","reducers","addToCart","state","action","Name","Description","Price","Img","Quantity","RestaurantName","payload","push","removeFromCart","_state$cartItems$inde","index","quantity","currentQuantity","splice","clearCart","updateQuantity","actions","reducer"],"sources":["C:/Users/SANTHOSH/React_Applications/swiggy/src/components/reducer.js"],"sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// let initialState = {\r\n//     cartItems: []\r\n// }\r\n    \r\n// let slice = createSlice({\r\n//     name: \"cart\",\r\n//     initialState: initialState,\r\n//     reducers: {\r\n//         addToCart: (state, action) => {\r\n//             state.cartItems.push(action.payload);\r\n//         },\r\n    \r\n//         removeFromCart: (state, action) => {\r\n//             const { index, quantity } = action.payload;\r\n//             const currentQuantity = state.cartItems[index]?.Quantity || 0;\r\n//             if (quantity >= currentQuantity) {\r\n//                 state.cartItems.splice(index, 1);\r\n//             } else {\r\n//                 state.cartItems[index].Quantity -= quantity;\r\n//             }\r\n//         },\r\n    \r\n//         clearCart(state, action) {\r\n//             state.cartItems = []; // Clear cartItems array\r\n//         },\r\n\r\n//         updateQuantity: (state, action) => {\r\n//             const { index, quantity } = action.payload;\r\n//             state.cartItems[index].Quantity = quantity;\r\n//         }\r\n//     }\r\n// });\r\n    \r\n// export const { addToCart, removeFromCart, updateQuantity , clearCart } = slice.actions;\r\n// export default slice.reducer;\r\n    \r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    cartItems: []\r\n};\r\n    \r\nconst slice = createSlice({\r\n    name: \"cart\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        addToCart: (state, action) => {\r\n            const { Name, Description, Price, Img, Quantity, RestaurantName } = action.payload;\r\n            state.cartItems.push({\r\n                Name,\r\n                Description,\r\n                Price,\r\n                Img,\r\n                Quantity,\r\n                RestaurantName  // Include RestaurantName in the cart item\r\n            });\r\n        },\r\n    \r\n        removeFromCart: (state, action) => {\r\n            const { index, quantity } = action.payload;\r\n            const currentQuantity = state.cartItems[index]?.Quantity || 0;\r\n            if (quantity >= currentQuantity) {\r\n                state.cartItems.splice(index, 1);\r\n            } else {\r\n                state.cartItems[index].Quantity -= quantity;\r\n            }\r\n        },\r\n    \r\n        clearCart(state, action) {\r\n            state.cartItems = []; // Clear cartItems array\r\n        },\r\n\r\n        updateQuantity: (state, action) => {\r\n            const { index, quantity } = action.payload;\r\n            state.cartItems[index].Quantity = quantity;\r\n        }\r\n    }\r\n});\r\n    \r\nexport const { addToCart, removeFromCart, updateQuantity, clearCart } = slice.actions;\r\nexport default slice.reducer;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,SAAS,EAAE;AACf,CAAC;AAED,MAAMC,KAAK,GAAGH,WAAW,CAAC;EACtBI,IAAI,EAAE,MAAM;EACZH,YAAY,EAAEA,YAAY;EAC1BI,QAAQ,EAAE;IACNC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1B,MAAM;QAAEC,IAAI;QAAEC,WAAW;QAAEC,KAAK;QAAEC,GAAG;QAAEC,QAAQ;QAAEC;MAAe,CAAC,GAAGN,MAAM,CAACO,OAAO;MAClFR,KAAK,CAACL,SAAS,CAACc,IAAI,CAAC;QACjBP,IAAI;QACJC,WAAW;QACXC,KAAK;QACLC,GAAG;QACHC,QAAQ;QACRC,cAAc,CAAE;MACpB,CAAC,CAAC;IACN,CAAC;IAEDG,cAAc,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MAAA,IAAAU,qBAAA;MAC/B,MAAM;QAAEC,KAAK;QAAEC;MAAS,CAAC,GAAGZ,MAAM,CAACO,OAAO;MAC1C,MAAMM,eAAe,GAAG,EAAAH,qBAAA,GAAAX,KAAK,CAACL,SAAS,CAACiB,KAAK,CAAC,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBL,QAAQ,KAAI,CAAC;MAC7D,IAAIO,QAAQ,IAAIC,eAAe,EAAE;QAC7Bd,KAAK,CAACL,SAAS,CAACoB,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;MACpC,CAAC,MAAM;QACHZ,KAAK,CAACL,SAAS,CAACiB,KAAK,CAAC,CAACN,QAAQ,IAAIO,QAAQ;MAC/C;IACJ,CAAC;IAEDG,SAASA,CAAChB,KAAK,EAAEC,MAAM,EAAE;MACrBD,KAAK,CAACL,SAAS,GAAG,EAAE,CAAC,CAAC;IAC1B,CAAC;IAEDsB,cAAc,EAAEA,CAACjB,KAAK,EAAEC,MAAM,KAAK;MAC/B,MAAM;QAAEW,KAAK;QAAEC;MAAS,CAAC,GAAGZ,MAAM,CAACO,OAAO;MAC1CR,KAAK,CAACL,SAAS,CAACiB,KAAK,CAAC,CAACN,QAAQ,GAAGO,QAAQ;IAC9C;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEd,SAAS;EAAEW,cAAc;EAAEO,cAAc;EAAED;AAAU,CAAC,GAAGpB,KAAK,CAACsB,OAAO;AACrF,eAAetB,KAAK,CAACuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}